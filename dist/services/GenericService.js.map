{"version":3,"file":"GenericService.js","sourceRoot":"","sources":["../../src/services/GenericService.ts"],"names":[],"mappings":";;;;AAGA,yCAAwC;AAGxC,MAAa,cAAc;IACzB,YAAmB,KAAuB;QAAvB,UAAK,GAAL,KAAK,CAAkB;IAAG,CAAC;IACxC,GAAG,CAAC,GAAM;;YACd,IAAI;gBACF,aAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACvB,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAChC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;gBACjB,OAAO,GAAG,CAAC;aACZ;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IACK,IAAI,CAAC,KAAU;;YACnB,IAAI;gBACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;gBAEjD,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IAEK,QAAQ,CAAC,EAAU,EAAE,WAAmB,EAAE;;YAC9C,IAAI;gBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAE7D,OAAO,GAAG,CAAC;aACZ;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IACK,GAAG,CAAC,GAAM;;YACd,IAAI;gBACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC7C,MAAM,SAAS,GAAG,OAAM,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,GAAG,EAAC,CAAC;gBAChD,aAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACrB,OAAO,SAAS,CAAC;aAClB;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IACK,MAAM,CAAC,EAAU;;YACrB,IAAI;gBACF,MAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;gBACvC,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAClB,OAAO,KAAK,CAAC;aACd;QACH,CAAC;KAAA;CACF;AAlDD,wCAkDC","sourcesContent":["import {IService} from \"./IService\";\r\nimport {MongooseModel} from \"@tsed/mongoose\";\r\nimport {Document} from \"mongoose\";\r\nimport {$log, Post} from \"@tsed/common\";\r\nimport {IModel} from \"../models/IModel\";\r\n\r\nexport class GenericService<T extends IModel> implements IService<T> {\r\n  constructor(public model: MongooseModel<T>) {}\r\n  async add(obj: T) {\r\n    try {\r\n      $log.info(\"info\", obj);\r\n      const doc = new this.model(obj);\r\n      await doc.save();\r\n      return doc;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n  async find(query: any) {\r\n    try {\r\n      const list = await this.model.find(query).exec();\r\n\r\n      return list;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n\r\n  async findById(id: String, populate: String = \"\") {\r\n    try {\r\n      const doc = await this.model.findById(id).populate(populate);\r\n\r\n      return doc;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n  async set(obj: T) {\r\n    try {\r\n      const prevDoc = await this.findById(obj._id);\r\n      const updateDoc = await prevDoc?.updateOne(obj);\r\n      $log.info(updateDoc);\r\n      return updateDoc;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n  async delete(id: String): Promise<boolean> {\r\n    try {\r\n      await this.model.findByIdAndDelete(id);\r\n      return true;\r\n    } catch (error) {\r\n      $log.error(error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]}