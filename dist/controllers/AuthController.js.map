{"version":3,"file":"AuthController.js","sourceRoot":"","sources":["../../src/controllers/AuthController.ts"],"names":[],"mappings":";;;;AAAA,yCAAwG;AACxG,yDAAoD;AACpD,6CAAuD;AACvD,yCAAoC;AAIpC,IAAa,cAAc,GAA3B,MAAa,cAAc;IACzB,YAAwC,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAI9D,KAAK,CAAQ,GAAQ,EAAgB,UAAuB,EAAmB,IAAS;;YAC5F,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,UAAU,CAAC,KAAK,EAAC,CAAC,CAAC;YACxE,IAAI,GAAG,QAAQ,CAAC;YAChB,aAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;QACjC,CAAC;KAAA;IAID,MAAM,CAAQ,GAAQ,EAAgB,IAAU;QAC9C,IAAI;SACH;QAAC,OAAO,KAAK,EAAE;YACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACnB;IACH,CAAC;IAGD,AADA,sBAAsB;IACtB,UAAU,CAAY,OAAY;QAChC,IAAI;YACF,aAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACxB,OAAO,OAAO,CAAC;SAChB;QAAC,OAAO,KAAK,EAAE;YACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACnB;IACH,CAAC;IAGD,MAAM,CAAc,GAAS;QAC3B,IAAI;SACH;QAAC,OAAO,KAAK,EAAE;YACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACnB;IACH,CAAC;CACF,CAAA;AAhCC;IAFC,aAAI,CAAC,QAAQ,CAAC;IACd,uBAAY,CAAC,OAAO,CAAC;IACT,mBAAA,YAAG,EAAE,CAAA,EAAY,mBAAA,mBAAU,EAAE,CAAA,EAA2B,mBAAA,gBAAO,CAAC,MAAM,CAAC,CAAA;;;;2CAInF;AAID;IAFC,aAAI,CAAC,SAAS,CAAC;IACf,uBAAY,CAAC,QAAQ,CAAC;IACf,mBAAA,YAAG,EAAE,CAAA,EAAY,mBAAA,mBAAU,EAAE,CAAA;;qDAAO,WAAI;;4CAK/C;AAGD;IAFC,YAAG,CAAC,UAAU,CAAC;IAEJ,mBAAA,gBAAO,EAAE,CAAA;;;;gDAOpB;AAGD;IAFC,YAAG,CAAC,SAAS,CAAC;IACd,oBAAS,CAAC,OAAO,CAAC;IACX,mBAAA,YAAG,CAAC,MAAM,CAAC,CAAA;;6CAAM,WAAI;;4CAK5B;AApCU,cAAc;IAD1B,mBAAU,CAAC,EAAE,CAAC;IAEA,mBAAA,eAAM,CAAC,yBAAW,CAAC,CAAA;6CAAqB,yBAAW;GADrD,cAAc,CAqC1B;AArCY,wCAAc","sourcesContent":["import {Controller, Inject, Post, Req, BodyParams, $log, Status, Put, Get, Session} from \"@tsed/common\";\r\nimport {UserService} from \"../services/UserService\";\r\nimport {Authenticate, Authorize} from \"@tsed/passport\";\r\nimport {User} from \"../models/User\";\r\nimport {ICredential} from \"../models/ICredential\";\r\n\r\n@Controller(\"\")\r\nexport class UserController {\r\n  constructor(@Inject(UserService) public userService: UserService) {}\r\n\r\n  @Post(\"/login\")\r\n  @Authenticate(\"login\")\r\n  async login(@Req() req: Req, @BodyParams() credential: ICredential, @Session(\"user\") user: any) {\r\n    const response = await this.userService.find({email: credential.email});\r\n    user = response;\r\n    $log.info(\"here in auth\", req);\r\n  }\r\n\r\n  @Post(\"/signup\")\r\n  @Authenticate(\"signup\")\r\n  signUp(@Req() req: Req, @BodyParams() user: User) {\r\n    try {\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n  @Get(\"/session\")\r\n  // @Authorize(\"basic\")\r\n  getSession(@Session() session: any) {\r\n    try {\r\n      $log.info(session.user);\r\n      return session;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n  @Get(\"/logout\")\r\n  @Authorize(\"basic\")\r\n  logout(@Req(\"user\") req: User) {\r\n    try {\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n}\r\n"]}