{"version":3,"file":"PostController.js","sourceRoot":"","sources":["../../src/controllers/PostController.ts"],"names":[],"mappings":"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","sourcesContent":["import {Controller, Get, Post, Inject, PathParams, BodyParams, Delete, $log, Put} from \"@tsed/common\";\r\nimport {Post as Posts} from \"../models/Post\";\r\nimport {PostService} from \"../services/PostService\";\r\nimport {Authorize} from \"@tsed/passport\";\r\nimport {User} from \"../models/User\";\r\nimport {UserService} from \"../services/UserService\";\r\n// import {tempId} from \"./AuthController\";\r\n\r\n@Controller(\"/posts\")\r\nexport class PostController {\r\n  constructor(@Inject(PostService) private service: PostService, @Inject(UserService) public userService: UserService) {}\r\n  @Get()\r\n  async getAll() {\r\n    const posts = await this.service.find({});\r\n\r\n    return posts;\r\n  }\r\n\r\n  //get the posts of another user\r\n  @Get(\"/user-posts/:id\")\r\n  async getProfilePosts(@PathParams(\"id\") id: String) {\r\n    const posts = await this.service.find({user: id});\r\n\r\n    return posts;\r\n  }\r\n  @Get(\"/post/:id\")\r\n  async get(@PathParams(\"id\") id: String) {\r\n    const post = await this.service.findById(id);\r\n    return post;\r\n  }\r\n\r\n  @Post()\r\n  @Authorize(\"jwt\")\r\n  async add(@BodyParams() post: Posts) {\r\n    // post.user = req._id;\r\n    // post.user = tempId;\r\n    $log.info(post);\r\n    const newPost = await this.service.add(post);\r\n    return newPost;\r\n  }\r\n\r\n  @Put(\"/update\")\r\n  @Authorize(\"jwt\")\r\n  async updatePost(@BodyParams() post: Posts) {\r\n    const updatePost = this.service.set(post);\r\n    return updatePost;\r\n  }\r\n  @Delete(\"/post/:id\")\r\n  @Authorize(\"jwt\")\r\n  async delete(@PathParams(\"id\") id: String) {\r\n    const response = await this.service.delete(id);\r\n    const users = (await this.userService.find({})) as User[];\r\n    users.map((user) => {\r\n      user.likedPosts = user.likedPosts?.filter((postId) => postId !== id);\r\n      user.bookMarkedPosts = user.bookMarkedPosts?.filter((postId) => postId !== id);\r\n      return user;\r\n    });\r\n    return response;\r\n  }\r\n}\r\n"]}