{"version":3,"file":"FileController.js","sourceRoot":"","sources":["../../src/controllers/FileController.ts"],"names":[],"mappings":";;;;AAAA,yCAA6E;AAC7E,yDAAkE;AAClE,2BAA+C;AAC/C,uCAAiC;AACjC,+BAA+B;AAC/B,iDAA0C;AAC1C,6CAAyC;AACzC,yCAAoC;AAEpC,MAAM,MAAM,GAAG,gBAAS,CAAC,WAAG,CAAC,CAAC;AAC9B,oDAAoD;AAEpD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAIrB,GAAG,CAAkB,IAAyB,EAAkB,GAAS;;YAC7E,aAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;YAErD,IAAI;gBACF,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBACvC,MAAM,QAAQ,GACZ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;oBACrD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBAEzF,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,IAAI,CAAC,QAAQ,MAAM,CAAC,CAAC;gBACxD,MAAM,WAAW,GAAG,iBAAY,CAAC,QAAQ,CAAC,CAAC;gBAC3C,MAAM,UAAU,GAAG,GAAG,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBAEvD,wEAAwE;gBACxE,aAAI,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAClD,MAAM,MAAM,GAAG,MAAM,iBAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;gBAEzF,OAAO;oBACL,OAAO,EAAE,CAAC;oBACV,IAAI,EAAE;wBACJ,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO;qBACvB;iBACF,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAClB,OAAO;oBACL,OAAO,EAAE,CAAC;iBACX,CAAC;aACH;QACH,CAAC;KAAA;IAEK,MAAM,CAAqB,IAAY;;YAC3C,MAAM,MAAM,GAAG;gBACb,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,IAAI;aACV,CAAC;YACF,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,QAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBAEvD,OAAO,MAAM,CAAC,YAAY,CAAC;aAC5B;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAElB,OAAO,KAAK,CAAC;aACd;YAED,6BAA6B;QAC/B,CAAC;KAAA;CACF,CAAA;AAhDC;IAHC,aAAI,CAAC,SAAS,CAAC;IACf,oBAAS,CAAC,KAAK,CAAC;IAChB,8BAAa,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC;IACtB,mBAAA,8BAAa,EAAE,CAAA,EAA6B,mBAAA,YAAG,CAAC,SAAS,CAAC,CAAA;;qDAAM,WAAI;;2CA6B9E;AAED;IADC,eAAM,CAAC,eAAe,CAAC;IACV,mBAAA,mBAAU,CAAC,MAAM,CAAC,CAAA;;;;8CAgB/B;AAnDU,gBAAgB;IAD5B,mBAAU,CAAC,OAAO,CAAC;GACP,gBAAgB,CAoD5B;AApDY,4CAAgB","sourcesContent":["import {$log, Controller, Delete, PathParams, Post, Req} from \"@tsed/common\";\r\nimport {MulterOptions, MultipartFile} from \"@tsed/multipartfiles\";\r\nimport {rename as ren, readFileSync} from \"fs\";\r\nimport {s3} from \"../config/aws\";\r\nimport {promisify} from \"util\";\r\nimport {bucket} from \"../config/firebase\";\r\nimport {Authorize} from \"@tsed/passport\";\r\nimport {User} from \"../models/User\";\r\n\r\nconst rename = promisify(ren);\r\n// const uploadFile = promisify(capella.uploadFile);\r\n@Controller(\"/file\")\r\nexport class UploadController {\r\n  @Post(\"/upload\")\r\n  @Authorize(\"jwt\")\r\n  @MulterOptions({dest: `/images`})\r\n  async add(@MultipartFile() file: Express.Multer.File, @Req(\"account\") req: User): Promise<any> {\r\n    $log.info(\"in adding an image\", file, process.cwd());\r\n\r\n    try {\r\n      const pos = file.path.lastIndexOf(\".\");\r\n      const showFile =\r\n        file.path.substr(0, pos < 0 ? file.path.length : pos) +\r\n        file.originalname.substr(file.originalname.lastIndexOf(\".\"), file.originalname.length);\r\n\r\n      await rename(file.path, `/images/${file.filename}.jpg`);\r\n      const fileContent = readFileSync(showFile);\r\n      const fileUpload = `${req.email}/${file.originalname}`;\r\n\r\n      //!needs to fix and rename this,after this think why iti was not working\r\n      $log.info(\"file uploaded\", showFile, fileContent);\r\n      const result = await bucket.upload(showFile, {contentType: file.mimetype, public: true});\r\n\r\n      return {\r\n        success: 1,\r\n        file: {\r\n          url: result[0].baseUrl,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      $log.error(error);\r\n      return {\r\n        success: 0,\r\n      };\r\n    }\r\n  }\r\n  @Delete(\"/delete/:name\")\r\n  async delete(@PathParams(\"name\") name: string): Promise<any> {\r\n    const params = {\r\n      Bucket: \"blog\",\r\n      Key: name,\r\n    };\r\n    try {\r\n      const result = await s3.deleteObject(params).promise();\r\n\r\n      return result.DeleteMarker;\r\n    } catch (error) {\r\n      $log.error(error);\r\n\r\n      return error;\r\n    }\r\n\r\n    // $log.info(\"file\", result);\r\n  }\r\n}\r\n"]}