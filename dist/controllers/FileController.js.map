{"version":3,"file":"FileController.js","sourceRoot":"","sources":["../../src/controllers/FileController.ts"],"names":[],"mappings":"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","sourcesContent":["import {$log, Controller, Delete, PathParams, Post, Req, Res} from \"@tsed/common\";\r\nimport {MulterOptions, MultipartFile} from \"@tsed/multipartfiles\";\r\nimport {rename as ren, readFileSync} from \"fs\";\r\nimport {s3} from \"../config/aws\";\r\nimport {promisify} from \"util\";\r\n// import {bucket} from \"../config/firebase\";\r\nimport {Authorize} from \"@tsed/passport\";\r\nimport {User} from \"../models/User\";\r\nimport e from \"express\";\r\nimport {diskStorage} from \"multer\";\r\n// import * as uuid from \"uuid-v4\";\r\nconst rename = promisify(ren);\r\n// const metadata = {\r\n//   metadata: {\r\n//     // This line is very important. It's to create a download token.\r\n//     firebaseStorageDownloadTokens: uuid(),\r\n//   },\r\n//   contentType: \"image/png\",\r\n//   cacheControl: \"public, max-age=31536000\",\r\n// };\r\n// const uploadFile = promisify(capella.uploadFile);\r\nconst imageFilter = function (req, file, cb) {\r\n  // accept image only\r\n  if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\r\n    return cb(new Error(\"Only image files are allowed!\"), false);\r\n  }\r\n  cb(null, true);\r\n};\r\n@Controller(\"/file\")\r\nexport class UploadController {\r\n  @Post(\"/upload\")\r\n  @Authorize(\"jwt\")\r\n  @MulterOptions({\r\n    storage: diskStorage({\r\n      destination: (req, file, cb) => {\r\n        cb(null, process.env.IMAGEDIR || `/images`);\r\n      },\r\n      filename: (req, file, cb) => {\r\n        cb(null, Date.now() + \".jpg\");\r\n      },\r\n    }),\r\n    fileFilter: imageFilter,\r\n  })\r\n  async add(@MultipartFile() file: Express.Multer.File, @Req(\"account\") req: User, @Res() res: e.Response): Promise<any> {\r\n    $log.info(\"in adding an image\", file);\r\n\r\n    try {\r\n      // const pos = file.path.lastIndexOf(\".\");\r\n      // const showFile = file.path.substr(0, pos < 0 ? file.path.length : pos) + \".jpg\";\r\n      // file.originalname.substr(file.originalname.lastIndexOf(\".\"), file.originalname.length);\r\n\r\n      // await rename(file.path, `${process.env.IMAGEDIR}/${file.originalname}`);\r\n      // const fileContent = readFileSync(showFile);\r\n      // const fileUpload = `${req.email}/${file.originalname}`;\r\n\r\n      //!needs to fix and rename this,after this think why iti was not working\r\n      // $log.info(\"file uploaded\", showFile);\r\n      // bucket.\r\n      // const result = await bucket.upload(showFile, {contentType: file.mimetype, public: true, gzip: true, metadata: metadata});\r\n\r\n      return {\r\n        success: 1,\r\n        file: {\r\n          url: `http://10.100.25.59:8081/images/${file.filename}`,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      $log.error(error);\r\n      return {\r\n        success: 0,\r\n      };\r\n    }\r\n  }\r\n  @Delete(\"/delete/:name\")\r\n  async delete(@PathParams(\"name\") name: string): Promise<any> {\r\n    const params = {\r\n      Bucket: \"blog\",\r\n      Key: name,\r\n    };\r\n    try {\r\n      const result = await s3.deleteObject(params).promise();\r\n\r\n      return result.DeleteMarker;\r\n    } catch (error) {\r\n      $log.error(error);\r\n\r\n      return error;\r\n    }\r\n\r\n    // $log.info(\"file\", result);\r\n  }\r\n  // @Get(\"/image/:name\")\r\n  // async get(@PathParams(\"name\") name: string): Promise<any> {\r\n\r\n  //   try {\r\n  //     const result = await s3.deleteObject(params).promise();\r\n\r\n  //     return result.DeleteMarker;\r\n  //   } catch (error) {\r\n  //     $log.error(error);\r\n\r\n  //     return error;\r\n  //   }\r\n\r\n  //   // $log.info(\"file\", result);\r\n  // }\r\n}\r\n"]}