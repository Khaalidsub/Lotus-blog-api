{"version":3,"file":"LoginLocalProtocol.js","sourceRoot":"","sources":["../../src/protocols/LoginLocalProtocol.ts"],"names":[],"mappings":";;;;AAAA,yCAA4D;AAC5D,6CAA6D;AAC7D,mDAA0D;AAC1D,yDAAoD;AAcpD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,YAAoB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;IAAG,CAAC;IAE3C,SAAS,CAAQ,OAAY,EAAgB,WAAwB,EAAa,WAAgB;;YACtG,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,WAAW,CAAC;YAEtC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;YAEtD,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,KAAK,CAAC;gBACb,kDAAkD;aACnD;YAED,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAClC,OAAO,KAAK,CAAC;gBACb,kDAAkD;aACnD;YACD,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;YACxB,WAAW,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YAC/B,aAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAClC,uBAAuB;YACvB,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED,UAAU,CAAC,QAAkB;QAC3B,qCAAqC;QACrC,gEAAgE;IAClE,CAAC;CACF,CAAA;AAzBC;IAAiB,mBAAA,YAAG,EAAE,CAAA,EAAgB,mBAAA,mBAAU,EAAE,CAAA,EAA4B,mBAAA,gBAAO,EAAE,CAAA;;;;mDAmBtF;AAtBU,kBAAkB;IAR9B,mBAAQ,CAAmB;QAC1B,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,yBAAQ;QACrB,QAAQ,EAAE;YACR,aAAa,EAAE,OAAO;YACtB,aAAa,EAAE,UAAU;SAC1B;KACF,CAAC;6CAEkC,yBAAW;GADlC,kBAAkB,CA4B9B;AA5BY,gDAAkB","sourcesContent":["import {BodyParams, Req, Session, $log} from \"@tsed/common\";\r\nimport {OnInstall, OnVerify, Protocol} from \"@tsed/passport\";\r\nimport {IStrategyOptions, Strategy} from \"passport-local\";\r\nimport {UserService} from \"../services/UserService\";\r\nimport {ICredential} from \"../models/ICredential\";\r\nimport {User} from \"../models/User\";\r\nimport {use} from \"passport\";\r\nimport session from \"express-session\";\r\n\r\n@Protocol<IStrategyOptions>({\r\n  name: \"login\",\r\n  useStrategy: Strategy,\r\n  settings: {\r\n    usernameField: \"email\",\r\n    passwordField: \"password\",\r\n  },\r\n})\r\nexport class LoginLocalProtocol implements OnVerify, OnInstall {\r\n  constructor(private usersService: UserService) {}\r\n\r\n  async $onVerify(@Req() request: Req, @BodyParams() credentials: ICredential, @Session() sessionUser: any) {\r\n    const {email, password} = credentials;\r\n\r\n    const user = await this.usersService.findOne({email});\r\n\r\n    if (!user) {\r\n      return false;\r\n      // OR throw new NotAuthorized(\"Wrong credentials\")\r\n    }\r\n\r\n    if (!user.verifyPassword(password)) {\r\n      return false;\r\n      // OR throw new NotAuthorized(\"Wrong credentials\")\r\n    }\r\n    sessionUser.user = user;\r\n    sessionUser.user.password = \"\";\r\n    $log.info(\"logged:\", sessionUser);\r\n    // request.user = user;\r\n    return user;\r\n  }\r\n\r\n  $onInstall(strategy: Strategy): void {\r\n    // $log.info(\"strategory\", strategy);\r\n    // intercept the strategy instance to adding extra configuration\r\n  }\r\n}\r\n"]}