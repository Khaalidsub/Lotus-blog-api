{"version":3,"file":"LoginLocalProtocol.js","sourceRoot":"","sources":["../../src/protocols/LoginLocalProtocol.ts"],"names":[],"mappings":";;;;AAAA,yCAA2D;AAC3D,6CAA6D;AAC7D,mDAA0D;AAC1D,yDAAoD;AAEpD,+CAAkC;AAWlC,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,YAAwC,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;IAAG,CAAC;IAE/D,SAAS,CAAQ,OAAY,EAAgB,WAAwB;;YACzE,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG,WAAW,CAAC;YACtC,aAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACnD,+BAA+B;YAC/B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;YAEtD,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,KAAK,CAAC;gBACb,kDAAkD;aACnD;YACD,oBAAoB;YAEpB,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAE;gBAC1C,kDAAkD;gBAClD,OAAO,KAAK,CAAC;aACd;YAED,aAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC3B,sBAAsB;YAEtB,MAAM,KAAK,GAAG,mBAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACnC,aAAI,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAClC,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;IAED,UAAU,CAAC,QAAkB;QAC3B,qCAAqC;QACrC,gEAAgE;IAClE,CAAC;CACF,CAAA;AA7BC;IAAiB,mBAAA,YAAG,EAAE,CAAA,EAAgB,mBAAA,mBAAU,EAAE,CAAA;;;;mDAuBjD;AA1BU,kBAAkB;IAT9B,mBAAQ,CAAmB;QAC1B,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,yBAAQ;QACrB,QAAQ,EAAE;YACR,aAAa,EAAE,OAAO;YACtB,aAAa,EAAE,UAAU;YACzB,OAAO,EAAE,KAAK;SACf;KACF,CAAC;IAEa,mBAAA,eAAM,CAAC,yBAAW,CAAC,CAAA;6CAAsB,yBAAW;GADtD,kBAAkB,CAgC9B;AAhCY,gDAAkB","sourcesContent":["import {BodyParams, Req, $log, Inject} from \"@tsed/common\";\r\nimport {OnInstall, OnVerify, Protocol} from \"@tsed/passport\";\r\nimport {IStrategyOptions, Strategy} from \"passport-local\";\r\nimport {UserService} from \"../services/UserService\";\r\nimport {ICredential} from \"../models/ICredential\";\r\nimport {sign} from \"jsonwebtoken\";\r\n\r\n@Protocol<IStrategyOptions>({\r\n  name: \"login\",\r\n  useStrategy: Strategy,\r\n  settings: {\r\n    usernameField: \"email\",\r\n    passwordField: \"password\",\r\n    session: false,\r\n  },\r\n})\r\nexport class LoginLocalProtocol implements OnVerify, OnInstall {\r\n  constructor(@Inject(UserService) public usersService: UserService) {}\r\n\r\n  async $onVerify(@Req() request: Req, @BodyParams() credentials: ICredential) {\r\n    const {email, password} = credentials;\r\n    $log.info(request.headers, request.headers.cookie);\r\n    // const value = new Passport()\r\n    const user = await this.usersService.findOne({email});\r\n\r\n    if (!user) {\r\n      return false;\r\n      // OR throw new NotAuthorized(\"Wrong credentials\")\r\n    }\r\n    // response.cookie =\r\n\r\n    if (!(await user.verifyPassword(password))) {\r\n      // OR throw new NotAuthorized(\"Wrong credentials\")\r\n      return false;\r\n    }\r\n\r\n    $log.info(\"logged:\", user);\r\n    // sessionUser = user;\r\n\r\n    const token = sign(user.id, \"app\");\r\n    $log.info(\"this is token\", token);\r\n    return token;\r\n  }\r\n\r\n  $onInstall(strategy: Strategy): void {\r\n    // $log.info(\"strategory\", strategy);\r\n    // intercept the strategy instance to adding extra configuration\r\n  }\r\n}\r\n"]}