{"version":3,"file":"JWTProtocol.js","sourceRoot":"","sources":["../../src/protocols/JWTProtocol.ts"],"names":[],"mappings":";;;;AAAA,yCAA+C;AAC/C,6CAAuD;AACvD,+CAAmE;AAEnE,yDAAoD;AAYpD,IAAa,WAAW,GAAxB,MAAa,WAAW;IACtB,YAAwC,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;IAAG,CAAC;IAE/D,SAAS,CAAQ,GAAQ,EAAU,UAAe;;YACtD,sCAAsC;YACtC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC;YAChE,4BAA4B;YAC5B,6BAA6B;YAC7B,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7B,CAAC;KAAA;CACF,CAAA;AAPC;IAAiB,mBAAA,YAAG,EAAE,CAAA,EAAY,mBAAA,cAAG,CAAC,CAAC,CAAC,CAAA;;;;4CAMvC;AATU,WAAW;IAVvB,mBAAQ,CAAkB;QACzB,IAAI,EAAE,KAAK;QACX,WAAW,EAAE,uBAAQ;QACrB,QAAQ,EAAE;YACR,cAAc,EAAE,yBAAU,CAAC,2BAA2B,EAAE;YACxD,WAAW,EAAE,KAAK;SAGnB;KACF,CAAC;IAEa,mBAAA,eAAM,CAAC,yBAAW,CAAC,CAAA;6CAAsB,yBAAW;GADtD,WAAW,CAUvB;AAVY,kCAAW","sourcesContent":["import {$log, Inject, Req} from \"@tsed/common\";\r\nimport {Arg, OnVerify, Protocol} from \"@tsed/passport\";\r\nimport {ExtractJwt, Strategy, StrategyOptions} from \"passport-jwt\";\r\n\r\nimport {UserService} from \"../services/UserService\";\r\n\r\n@Protocol<StrategyOptions>({\r\n  name: \"jwt\",\r\n  useStrategy: Strategy,\r\n  settings: {\r\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n    secretOrKey: \"app\",\r\n    // issuer: \"accounts.examplesoft.com\",\r\n    // audience: \"yoursite.net\"\r\n  },\r\n})\r\nexport class JwtProtocol implements OnVerify {\r\n  constructor(@Inject(UserService) public usersService: UserService) {}\r\n\r\n  async $onVerify(@Req() req: Req, @Arg(0) jwtPayload: any) {\r\n    // $log.info(\"i am here\", jwtPayload);\r\n    const user = await this.usersService.findOne({_id: jwtPayload});\r\n    // $log.info(\"found\", user);\r\n    // user?.password = undefined\r\n    return user ? user : false;\r\n  }\r\n}\r\n"]}