{"version":3,"file":"SignUpLocalProtocol.js","sourceRoot":"","sources":["../../src/protocols/SignUpLocalProtocol.ts"],"names":[],"mappings":";;;;AAAA,yCAA4D;AAC5D,6CAA6D;AAC7D,mDAAwC;AACxC,iDAA2C;AAC3C,yDAAoD;AACpD,yCAAoC;AAWpC,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAC9B,YAAoB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;IAAG,CAAC;IAE3C,SAAS,CAAQ,OAAY,EAAgB,IAAU,EAAa,OAAwB;;YAChG,IAAI;gBACF,aAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;gBACpC,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC;gBACrB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;gBAEvD,IAAI,KAAK,EAAE;oBACT,MAAM,IAAI,sBAAS,CAAC,6BAA6B,CAAC,CAAC;iBACpD;gBAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,SAAS;oBAAE,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;gBACxC,gDAAgD;gBAChD,OAAO,SAAS,CAAC;aAClB;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IAED,UAAU,CAAC,QAAkB;QAC3B,gEAAgE;IAClE,CAAC;CACF,CAAA;AAtBC;IAAiB,mBAAA,YAAG,EAAE,CAAA,EAAgB,mBAAA,mBAAU,EAAE,CAAA,EAAc,mBAAA,gBAAO,EAAE,CAAA;;qDAAhB,WAAI;;oDAiB5D;AApBU,mBAAmB;IAR/B,mBAAQ,CAAC;QACR,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,yBAAQ;QACrB,QAAQ,EAAE;YACR,aAAa,EAAE,OAAO;YACtB,aAAa,EAAE,UAAU;SAC1B;KACF,CAAC;6CAEkC,yBAAW;GADlC,mBAAmB,CAyB/B;AAzBY,kDAAmB","sourcesContent":["import {BodyParams, Req, $log, Session} from \"@tsed/common\";\r\nimport {OnInstall, OnVerify, Protocol} from \"@tsed/passport\";\r\nimport {Strategy} from \"passport-local\";\r\nimport {Forbidden} from \"@tsed/exceptions\";\r\nimport {UserService} from \"../services/UserService\";\r\nimport {User} from \"../models/User\";\r\nimport {session} from \"passport\";\r\n\r\n@Protocol({\r\n  name: \"signup\",\r\n  useStrategy: Strategy,\r\n  settings: {\r\n    usernameField: \"email\",\r\n    passwordField: \"password\",\r\n  },\r\n})\r\nexport class SignupLocalProtocol implements OnVerify, OnInstall {\r\n  constructor(private usersService: UserService) {}\r\n\r\n  async $onVerify(@Req() request: Req, @BodyParams() user: User, @Session() session: Express.Session) {\r\n    try {\r\n      $log.info(\"here in protocol\", user);\r\n      const {email} = user;\r\n      const found = await this.usersService.findOne({email});\r\n\r\n      if (found) {\r\n        throw new Forbidden(\"Email is already registered\");\r\n      }\r\n\r\n      const foundUser = await this.usersService.add(user);\r\n      if (foundUser) session.user = foundUser;\r\n      //  await this.usersService.findOne(user.email);\r\n      return foundUser;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n\r\n  $onInstall(strategy: Strategy): void {\r\n    // intercept the strategy instance to adding extra configuration\r\n  }\r\n}\r\n"]}