{"version":3,"file":"SignUpLocalProtocol.js","sourceRoot":"","sources":["../../src/protocols/SignUpLocalProtocol.ts"],"names":[],"mappings":";;;;AAAA,yCAAsD;AACtD,6CAA6D;AAC7D,mDAA0D;AAC1D,iDAA2C;AAC3C,yDAAoD;AACpD,yCAAoC;AACpC,+CAAkC;AAClC,mCAA4B;AAC5B,MAAM,UAAU,GAAG,EAAE,CAAC;AAUtB,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAC9B,YAAwC,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;IAAG,CAAC;IAE/D,SAAS,CAAe,IAAU;;YACtC,IAAI;gBACF,uCAAuC;gBACvC,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC;gBACrB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;gBAEvD,IAAI,KAAK,EAAE;oBACT,MAAM,IAAI,sBAAS,CAAC,6BAA6B,CAAC,CAAC;iBACpD;gBACD,MAAM,QAAQ,GAAG,MAAM,aAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBACvD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClD,IAAI,CAAC,OAAO,EAAE;oBACZ,OAAO,KAAK,CAAC;iBACd;gBAED,gDAAgD;gBAChD,MAAM,KAAK,GAAG,mBAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;gBACtC,aAAI,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;gBAClC,OAAO,KAAK,CAAC;aACd;YAAC,OAAO,KAAK,EAAE;gBACd,aAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACnB;QACH,CAAC;KAAA;IAED,UAAU,CAAC,QAAkB;QAC3B,gEAAgE;IAClE,CAAC;CACF,CAAA;AA5BC;IAAiB,mBAAA,mBAAU,EAAE,CAAA;;6CAAO,WAAI;;oDAuBvC;AA1BU,mBAAmB;IAT/B,mBAAQ,CAAmB;QAC1B,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,yBAAQ;QACrB,QAAQ,EAAE;YACR,aAAa,EAAE,OAAO;YACtB,aAAa,EAAE,UAAU;YACzB,OAAO,EAAE,KAAK;SACf;KACF,CAAC;IAEa,mBAAA,eAAM,CAAC,yBAAW,CAAC,CAAA;6CAAsB,yBAAW;GADtD,mBAAmB,CA+B/B;AA/BY,kDAAmB","sourcesContent":["import {BodyParams, $log, Inject} from \"@tsed/common\";\r\nimport {OnInstall, OnVerify, Protocol} from \"@tsed/passport\";\r\nimport {Strategy, IStrategyOptions} from \"passport-local\";\r\nimport {Forbidden} from \"@tsed/exceptions\";\r\nimport {UserService} from \"../services/UserService\";\r\nimport {User} from \"../models/User\";\r\nimport {sign} from \"jsonwebtoken\";\r\nimport {hash} from \"bcrypt\";\r\nconst saltRounds = 10;\r\n@Protocol<IStrategyOptions>({\r\n  name: \"signup\",\r\n  useStrategy: Strategy,\r\n  settings: {\r\n    usernameField: \"email\",\r\n    passwordField: \"password\",\r\n    session: false,\r\n  },\r\n})\r\nexport class SignupLocalProtocol implements OnVerify, OnInstall {\r\n  constructor(@Inject(UserService) public usersService: UserService) {}\r\n\r\n  async $onVerify(@BodyParams() user: User) {\r\n    try {\r\n      // $log.info(\"here in protocol\", user);\r\n      const {email} = user;\r\n      const found = await this.usersService.findOne({email});\r\n\r\n      if (found) {\r\n        throw new Forbidden(\"Email is already registered\");\r\n      }\r\n      const password = await hash(user.password, saltRounds);\r\n      user.password = password;\r\n      const newUser = await this.usersService.add(user);\r\n      if (!newUser) {\r\n        return false;\r\n      }\r\n\r\n      //  await this.usersService.findOne(user.email);\r\n      const token = sign(newUser.id, \"app\");\r\n      $log.info(\"this is token\", token);\r\n      return token;\r\n    } catch (error) {\r\n      $log.error(error);\r\n    }\r\n  }\r\n\r\n  $onInstall(strategy: Strategy): void {\r\n    // intercept the strategy instance to adding extra configuration\r\n  }\r\n}\r\n"]}