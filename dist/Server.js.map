{"version":3,"file":"Server.js","sourceRoot":"","sources":["../src/Server.ts"],"names":[],"mappings":";;;;AAAA,iCAA+C;AAC/C,yCAAiD;AACjD,kCAAgC,CAAC,uBAAuB;AACxD,6DAAmE;AACnE,0CAA0C;AAC1C,wCAAwC;AACxC,8CAA8C;AAC9C,kDAAkD;AAClD,6BAA6B;AAC7B,qBAAmB;AACnB,0BAAwB;AACxB,gDAA+C;AAC/C,qEAA+D;AAC/D,qCAAqC;AACrC,2CAA2C;AAC3C,uCAAuC;AACvC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;AAElC,wCAAmC;AACnC,6EAAkF;AAErE,QAAA,OAAO,GAAG,SAAS,CAAC;AAsBjC,IAAa,MAAM,GAAnB,MAAa,MAAM;IAOjB,iBAAiB;QACf,QAAQ,CAAC,OAAO,CAAC,wBAAe,CAAC,GAAG,EAAE,wBAAe,CAAC,iBAAiB,CAAC,CAAC;QACzE,IAAI,CAAC,GAAG;aACL,GAAG,CAAC,IAAI,EAAE,CAAC;aACX,GAAG,CAAC,8CAA2B,CAAC;aAChC,GAAG,CAAC,YAAY,EAAE,CAAC;aACnB,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;aACjB,GAAG,CAAC,cAAc,EAAE,CAAC;aACrB,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;aACtB,GAAG,CACF,UAAU,CAAC,UAAU,CAAC;YACpB,QAAQ,EAAE,IAAI;SACf,CAAC,CACH;aAEA,GAAG,CACF,OAAO,CAAC;YACN,MAAM,EAAE,WAAW;YACnB,MAAM,EAAE,IAAI;YACZ,iBAAiB,EAAE,IAAI;YACvB,KAAK,EAAE,IAAI,UAAU,CAAC,EAAC,kBAAkB,EAAE,QAAQ,CAAC,UAAU,EAAC,CAAC;YAChE,MAAM,EAAE;gBACN,IAAI,EAAE,GAAG;gBACT,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,KAAK;gBACb,MAAM,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE;aACxB;SACF,CAAC,CACH,CAAC;QACJ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qDAA8B,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AArCC;IADC,WAAM,EAAE;sCACJ,4BAAmB;mCAAC;AAGzB;IADC,kBAAa,EAAE;;wCACQ;AALb,MAAM;IApBlB,kBAAa,CAAC;QACb,OAAO,EAAP,eAAO;QACP,WAAW,EAAE,CAAC,kBAAkB,CAAC;QACjC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI;QAClC,SAAS,EAAE,IAAI;QACf,cAAc,EAAE;YACd,GAAG,eAAO,oBAAoB;YAC9B,GAAG,eAAO,mBAAmB;YAC7B,GAAG,eAAO,iBAAiB;YAC3B,GAAG,eAAO,sBAAsB;SACjC;QACD,KAAK,EAAE;YACL,OAAO,EAAE,CAAC,GAAG,eAAO,sBAAsB,CAAC;SAC5C;QACD,QAAQ,EAAE;YACR,aAAa,EAAE,WAAI;SACpB;QACD,QAAQ,EAAE,kBAAc;QACxB,OAAO,EAAE,CAAC,cAAc,CAAC;KAC1B,CAAC;GACW,MAAM,CAuClB;AAvCY,wBAAM","sourcesContent":["import {Configuration, Inject} from \"@tsed/di\";\r\nimport {PlatformApplication} from \"@tsed/common\";\r\nimport \"@tsed/platform-express\"; // /!\\ keep this import\r\nimport {GlobalAcceptMimesMiddleware} from \"@tsed/platform-express\";\r\nimport * as bodyParser from \"body-parser\";\r\nimport * as compress from \"compression\";\r\nimport * as cookieParser from \"cookie-parser\";\r\nimport * as methodOverride from \"method-override\";\r\nimport * as cors from \"cors\";\r\nimport \"@tsed/ajv\";\r\nimport \"@tsed/mongoose\";\r\nimport mongooseConfig from \"./config/mongoose\";\r\nimport mongoConnection from \"./config/mongoose/default.config\";\r\nimport * as mongoose from \"mongoose\";\r\nimport * as session from \"express-session\";\r\nimport * as Mongo from \"connect-mongo\";\r\nconst MongoStore = Mongo(session);\r\n\r\nimport {User} from \"./models/User\";\r\nimport {CreateRequestSessionMiddleware} from \"./middlewares/CreateRequestSession\";\r\n\r\nexport const rootDir = __dirname;\r\n\r\n@Configuration({\r\n  rootDir,\r\n  acceptMimes: [\"application/json\"],\r\n  httpPort: process.env.PORT || 8083,\r\n  httpsPort: true, // CHANGE\r\n  componentsScan: [\r\n    `${rootDir}/protocols/**/*.ts`,\r\n    `${rootDir}/services/**/*.ts`,\r\n    `${rootDir}/models/**/*.ts`,\r\n    `${rootDir}/middlewares/**/*.ts`,\r\n  ],\r\n  mount: {\r\n    \"/blog\": [`${rootDir}/controllers/**/*.ts`],\r\n  },\r\n  passport: {\r\n    userInfoModel: User,\r\n  },\r\n  mongoose: mongooseConfig,\r\n  exclude: [\"**/*.spec.ts\"],\r\n})\r\nexport class Server {\r\n  @Inject()\r\n  app: PlatformApplication;\r\n\r\n  @Configuration()\r\n  settings: Configuration;\r\n\r\n  $beforeRoutesInit() {\r\n    mongoose.connect(mongoConnection.url, mongoConnection.connectionOptions);\r\n    this.app\r\n      .use(cors())\r\n      .use(GlobalAcceptMimesMiddleware)\r\n      .use(cookieParser())\r\n      .use(compress({}))\r\n      .use(methodOverride())\r\n      .use(bodyParser.json())\r\n      .use(\r\n        bodyParser.urlencoded({\r\n          extended: true,\r\n        })\r\n      )\r\n\r\n      .use(\r\n        session({\r\n          secret: \"chocoLate\",\r\n          resave: true,\r\n          saveUninitialized: true,\r\n          store: new MongoStore({mongooseConnection: mongoose.connection}),\r\n          cookie: {\r\n            path: \"/\",\r\n            httpOnly: true,\r\n            secure: false,\r\n            maxAge: 36000 * 60 * 24,\r\n          },\r\n        })\r\n      );\r\n    this.app.use(CreateRequestSessionMiddleware);\r\n    return null;\r\n  }\r\n}\r\n"]}